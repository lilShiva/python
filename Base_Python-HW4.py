"""
# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
#    В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
#    Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

# Решение 1 (мое)
from sys import argv

name, hours_work, hours_rate, prize = argv
res = argv[1: len(argv)]
result = [int(i) for i in res]

print(f'Выработка {result[0]} часов, ставка в час - {result[1]} руб., премия {result[2]} руб. Ваша ЗП: {(result[0] * result[1]) + result[2]} руб.')
"""
"""
# Решение 2
from sys import argv

def salary():
    try:
        time, rate, bonus = map(int, argv[1:])
        print(f'Salary  {time * rate + bonus}')
    except ValueError:
        print("Enter all 3 numbers.")

salary()
"""
"""
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#    Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
#    Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#    Результат: [12, 44, 4, 10, 78, 123].

s_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
s_new = [s_list[n] for n in range(1, len(s_list)) if s_list[n] > s_list[n-1]]

print(s_new)
"""
"""
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#    Подсказка: использовать функцию range() и генератор.

task_third = [n for n in range(20, 241) if n % 20 == 0 or n % 21 == 0]
print(task_third)
"""
"""
# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
#    соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
#    Для выполнения задания обязательно использовать генератор.
#    Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#    Результат: [23, 1, 3, 10, 4, 11]

from random import randint

four_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
four_list2 = [randint(-1000, 1000) for _ in range(2000)]
task_four = [n for n in four_list2 if four_list.count(n) == 1]
print(task_four)
"""
"""
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
#    В список должны войти четные числа от 100 до 1000 (включая границы).
#    Необходимо получить результат вычисления произведения всех элементов списка.
#    Подсказка: использовать функцию reduce().

from functools import reduce

five_list = [n for n in range(100,1001) if n % 2 == 0]
# summa = sum(five_list)
summa = reduce(lambda x, y: x+y, five_list)
print(summa)
"""
"""
# 6. Реализовать два небольших скрипта:
#    а) Итератор, генерирующий целые числа, начиная с указанного,
#    б) Итератор, повторяющий элементы некоторого списка, определенного заранее.
#    Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание,
#    что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
#    Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
#    Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

#    а)
from itertools import count

for i in count(3):
    if i > 10:
        break
    else:
        print(i)

#    б)
# Решение 1
from itertools import cycle

count = 1
a = ['one', 'two', 3]

for item in cycle(a):
    if count > 5:
        break
    print(item)
    count += 1

# Решение 2
from itertools import cycle

b = ['rose', 'thistle', 'shamrock', 'daffodil']
iterator = cycle(b)

print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
"""

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#    При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
#    Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
#    Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact (num):
    f_num = 1
    if num == 0:
        yield f'{num}! = 1'
    for i in range(1, num + 1):
        f_num *= i
        yield f'{i}! = {f_num}'

for el in fact(int(input('Факториал: '))):
    print(el)


